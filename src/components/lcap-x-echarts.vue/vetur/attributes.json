{
  "lcap-x-echarts/init-options": {
    "type": "object",
    "description": "Initialize instance"
  },
  "lcap-x-echarts/options": {
    "type": "object",
    "description": "Data for the ECharts instance. Modifying this prop will trigger the `setOption` method of the ECharts instance. If the data bound to `options` is modified directly and the object reference remains unchanged, the `setOption` method will be called with the parameter `notMerge: false`. Otherwise, if a new object is bound to `options`, the `setOption` method will be called with the argument `notMerge: true`."
  },
  "lcap-x-echarts/theme": {
    "type": "string",
    "description": "Set theme"
  },
  "lcap-x-echarts/group": {
    "type": "string",
    "description": "The grouping of instances will be automatically bound to the property of the same name of the ECharts component."
  },
  "lcap-x-echarts/autoresize": {
    "type": "boolean",
    "description": "Specify whether the ECharts instance needs to be automatically redrawn when the size of the component's root element changes."
  },
  "lcap-x-echarts/manual-update": {
    "type": "boolean",
    "description": "In performance-sensitive (large amounts of data) scenarios, we'd better bypass Vue's reactive system for the `options` prop. When the `manual-update` prop is specified as `true` and does not pass When entering the `options` prop, the data will not be monitored. Then, you need to use `ref` to get the component instance and then manually call the `mergeOptions` method to update the chart. "
  },
  "lcap-x-echarts/border": {
    "type": "boolean",
    "description": "Whether to add a border"
  }
}